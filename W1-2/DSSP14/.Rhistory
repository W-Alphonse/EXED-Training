theme(legend.position = "none")
# install.packages("ggbeeswarm")
# install.packages("ggforce")
# ggbeeswarm::geom_beeswarm() le "::" evite de charger le package ggbeeswarm
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#
# ggbeeswarm::geom_beeswarm() +    # The beeswarm geom is a convenient means to offset points within categories to reduce overplotting
# ggbeeswarm::geom_quasirandom() + # The quasirandom geom is a convenient means to offset points within categories to reduce overplotting.
ggforce::geom_sina() +           # Data visualization chart suitable for plotting any single variable in a multiclass dataset
#
theme_minimal()  +
theme(legend.position = "none")
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#  ggbeeswarm::geom_beeswarm() +
ggbeeswarm::geom_quasirandom() +
# ggforce::geom_sina() +
labs(x="Iris species", y = "Sepal length", title = "Mettre un titre bien informatif", fill = "Espèces") +
theme_minimal()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#
# ggbeeswarm::geom_beeswarm() +    # The beeswarm geom is a convenient means to offset points within categories to reduce overplotting
# ggbeeswarm::geom_quasirandom() + # The quasirandom geom is a convenient means to offset points within categories to reduce overplotting.
ggforce::geom_sina() +           # Data visualization chart suitable for plotting any single variable in a multiclass dataset
#
theme_minimal()
# ggbeeswarm::geom_beeswarm() le "::" evite de charger le package ggbeeswarm
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#
# ggbeeswarm::geom_beeswarm() +    # The beeswarm geom is a convenient means to offset points within categories to reduce overplotting
# ggbeeswarm::geom_quasirandom() + # The quasirandom geom is a convenient means to offset points within categories to reduce overplotting.
ggforce::geom_sina() +           # Data visualization chart suitable for plotting any single variable in a multiclass dataset
#
theme_minimal()  +
theme(legend.position = "none")
# install.packages("ggbeeswarm")
# install.packages("ggforce")
# ggbeeswarm::geom_beeswarm() le "::" evite de charger le package ggbeeswarm
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#
# ggbeeswarm::geom_beeswarm() +    # The beeswarm geom is a convenient means to offset points within categories to reduce overplotting
# ggbeeswarm::geom_quasirandom() + # The quasirandom geom is a convenient means to offset points within categories to reduce overplotting.
ggforce::geom_sina() +           # Data visualization chart suitable for plotting any single variable in a multiclass dataset
#
#theme_minimal()  +
theme(legend.position = "none")
# install.packages("ggbeeswarm")
# install.packages("ggforce")
# ggbeeswarm::geom_beeswarm() le "::" evite de charger le package ggbeeswarm
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#
# ggbeeswarm::geom_beeswarm() +    # The beeswarm geom is a convenient means to offset points within categories to reduce overplotting
# ggbeeswarm::geom_quasirandom() + # The quasirandom geom is a convenient means to offset points within categories to reduce overplotting.
ggforce::geom_sina() +           # Data visualization chart suitable for plotting any single variable in a multiclass dataset
#
theme_minimal()  +
theme(legend.position = "none")
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#  ggbeeswarm::geom_beeswarm() +
ggbeeswarm::geom_quasirandom() +
# ggforce::geom_sina() +
# labs : Modify axis, legend, and plot labels
labs(x="Iris species", y = "Sepal length", title = "Mettre un titre bien informatif", fill = "Espèces") +
theme_minimal()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#  ggbeeswarm::geom_beeswarm() +
ggbeeswarm::geom_quasirandom() +
# ggforce::geom_sina() +
# labs : Modify axis, legend, and plot labels
labs(x="Iris species", y = "Sepal length", title = "Mettre un titre bien informatif") +
theme_minimal()
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal()
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
#scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal()
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal() +
theme(legend.position = c(0.85, 0.68),
legend.box.background = element_rect(fill = "white",
color= "black"),
plot.title = element_text (face="bold", hjust = 0.5, color= "red"))
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal() +
theme(legend.position = c(0.85, 0.68),
legend.box.background = element_rect(fill = "white",
color= "black"),
plot.title = element_text (face="bold", vjust = 0.5, color= "red"))
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal() +
theme(legend.position = c(0.85, 0.68),
legend.box.background = element_rect(fill = "white",
color= "black"),
plot.title = element_text (face="bold", vjust = 5.5, color= "red"))
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal() +
theme(legend.position = c(0.85, 0.68),
legend.box.background = element_rect(fill = "white",
color= "black"),
plot.title = element_text (face="bold", hjust = 0.5, color= "red"))
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal() +
theme(legend.position = c(5.85, 0.68),
legend.box.background = element_rect(fill = "white",
color= "black"),
plot.title = element_text (face="bold", hjust = 0.5, color= "red")) # hjust=0.5 => In the middle
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal() +
theme(legend.position = c(3.85, 0.68),
legend.box.background = element_rect(fill = "white",
color= "black"),
plot.title = element_text (face="bold", hjust = 0.5, color= "red")) # hjust=0.5 => In the middle
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal() +
theme(legend.position = c(0.85, 0.68),
legend.box.background = element_rect(fill = "white",
color= "black"),
plot.title = element_text (face="bold", hjust = 0.5, color= "red")) # hjust=0.5 => In the middle
# c(....) : Combine Values into a Vector or List
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal() +
theme(legend.position = c(0.15, 0.68), # using relative coordinates between 0 and 1
legend.box.background = element_rect(fill = "white",
color= "black"),
plot.title = element_text (face="bold", hjust = 0.5, color= "red")) # hjust=0.5 => In the middle
# c(....) : Combine Values into a Vector or List
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal() +
theme(legend.position = c(0.85, 0.68), # using relative coordinates between 0 and 1
legend.box.background = element_rect(fill = "white",
color= "black"),
plot.title = element_text (face="bold", hjust = 0.5, color= "red")) # hjust=0.5 => In the middle
# c(....) : Combine Values into a Vector or List
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal() +
theme(legend.position = c(0.85, 0.18), # using relative coordinates between 0 and 1
legend.box.background = element_rect(fill = "white",
color= "black"),
plot.title = element_text (face="bold", hjust = 0.5, color= "red")) # hjust=0.5 => In the middle
6
# c(....) : Combine Values into a Vector or List
ggplot(iris) +
aes(x = Sepal.Width, y = Sepal.Length, color = Species) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Sepal width", y = "Sepalength", title = "Sepal by sizes") +
theme_minimal() +
theme(legend.position = c(0.85, 0.68), # using relative coordinates between 0 and 1
legend.box.background = element_rect(fill = "white",
color= "black"),
plot.title = element_text (face="bold", hjust = 0.5, color= "red")) # hjust=0.5 => In the middle
#====================================================================
# The purpose of this add-in is to let you explore your data quickly to extract the information they hold.
# You can only create simple plots, you won’t be able to use custom scales and all the power of ggplot2.
# package "esquisse"
install.packages("esquisse")
esquisse::esquisser
esquisse::esquisser()
esquisse::esquisser()
esquisse::esquisser()
# calculer la moyenne par grouppe
# dfinir le jeu de données | group by | sumarise
#dataset::iris
df_mean  <- iris %>%
group_by(Species) %>%
summarise(mean = mean(Sepal.Length))
# calculer la moyenne par grouppe
# dfinir le jeu de données | group by | sumarise
#dataset::iris
iris
# calculer la moyenne par grouppe
# dfinir le jeu de données | group by | sumarise
#dataset::iris
as_tibble(iris)
as_tibble(iris)
df_mean  <- iris %>%
group_by(Species) %>%
summarise(mean = mean(Sepal.Length))
ggplot(iris) +
aes(x = Species, y = Sepal.Length) +
geom_boxplot(fill = "lightblue") +
geom_point(data = df_mean,
mapping = aes(y=mean),
color = "red", size = 5, shape = "X") +
labs(caption = "Means are in red") +
theme_minimal() +
theme(legend.position = "none")
ggplot(iris) +
aes(x = Species, y = Sepal.Length) +
geom_boxplot(fill = "lightblue") +
geom_point(data = df_mean,
mapping = aes(y=mean),
color = "red", size = 5, shape = "+") +
labs(caption = "Means are in red") +
theme_minimal() +
theme(legend.position = "none")
ggplot(iris) +
aes(x = Species, y = Sepal.Length) +
geom_boxplot(fill = "lightblue") +
geom_point(data = df_mean,
mapping = aes(y=mean),
color = "red", size = 5, shape = "o") +
labs(caption = "Means are in red") +
theme_minimal() +
theme(legend.position = "none")
ggplot(iris) +
aes(x = Species, y = Sepal.Length) +
geom_boxplot(fill = "lightblue") +
geom_point(data = df_mean,
mapping = aes(y=mean),
color = "red", size = 5, shape = "X") +
labs(caption = "Means are in red") +
theme_minimal() +
theme(legend.position = "none")
ggplot(iris) +
aes(x = Species, y = Sepal.Length) +
geom_boxplot(fill = "lightblue") +
geom_point(data = df_mean,
mapping = aes(y=mean),
color = "red", size = 5, shape = "x") +
labs(caption = "Means are in red") +
theme_minimal() +
theme(legend.position = "none")
ggplot(iris) +
aes(x = Species, y = Sepal.Length) +
geom_boxplot(fill = "lightblue") +
geom_point(data = df_mean,
mapping = aes(y=mean),  # it is combined with the default mapping at the top level of the plot. You must supply mapping if there is no plot mapping.
color = "red", size = 5, shape = "x") +
labs(caption = "Means are in red") +
theme_minimal() +
theme(legend.position = "none")
ggplot(iris) +
aes(x = Species, y = Sepal.Length) +
geom_boxplot(fill = "lightblue") +
geom_point(data = df_mean,
mapping = aes(y=mean),  # it is combined with the default mapping at the top level of the plot. You must supply mapping if there is no plot mapping.
color = "red", size = 15, shape = "x") +
labs(caption = "Means are in red") +
theme_minimal() +
theme(legend.position = "none")
ggplot(iris) +
aes(x = Species, y = Sepal.Length) +
geom_boxplot(fill = "lightblue") +
geom_point(data = df_mean,
mapping = aes(y=mean),  # it is combined with the default mapping at the top level of the plot. You must supply mapping if there is no plot mapping.
color = "red", size = 5, shape = "x") +
labs(caption = "Means are in red") +
theme_minimal() +
theme(legend.position = "none")
ggplot(iris) +
aes(x = Species, y = Sepal.Length) +
geom_boxplot(fill = "lightblue") +
geom_point(data = df_mean,
mapping = aes(y=mean),
color = "red", size = 5, shape = "X") +
scale_y_continuous(limits = c(0,NA)) +
labs(caption = "Means are in red") +
theme_minimal() +
theme(legend.position = "none")
# jeud de données diamonds
diamonds
?diamonds
ggplot(diamonds) +
# NB: tout les parametres ci dessous (...) descendent au niveau "suivant" ds les layers
aes(x = carat, y = price, color = cut) +
geom_point() +
geom_smooth()
diamonds.$cut
diamonds$cut
# NB: tout les parametres ci dessous (...) descendent au niveau "suivant" ds les layers
ggplot(diamonds) +
aes(x = carat, y = price) +
geom_point(aes(color = cut)) +
geom_smooth()
ggplot(diamonds) +
aes(x = carat, y = price) +
geom_point(aes(color = cut)) +
geom_smooth(color="red")
ggplot(diamonds) +
aes(x = carat, y = price) +
geom_point(aes(color = cut)) +
geom_smooth(color="red") +
scale_y_sqrt()
ggplot(diamonds) +
aes(x=cut) +
geom_bar()
# Utilisation du wrapper "count" pour faire le count
diamonds %>%
count(cut)
diamonds %>%
count(cut) %>%
ggplot() +
aes(x = cut, y = n) +  # 'n' --> COUNT
geom_col()
diamonds %>%
count(cut) %>%
ggplot() +
aes(x = cut, y = n) +  # 'n' --> COUNT
geom_bar()
diamonds %>%
count(cut) %>%
ggplot() +
aes(x = cut, y = n) +  # 'n' --> COUNT
geom_bar()
diamonds %>%
count(cut) %>%
ggplot() +
aes(x = cut, y = n) +  # 'n' --> COUNT
geom_col()
ggplot(diamonds) +
aes(x=cut) +
geom_bar()
ggplot(diamonds) +
aes(x=cut, color= cut) +
geom_bar()
ggplot(diamonds) +
aes(x=cut, fill= cut) +
geom_bar()
diamonds %>%
count(cut) %>%
ggplot() +
aes(x = cut, y = n) +  # 'n' --> COUNT
geom_col()
diamonds %>%
count(cut) %>%
ggplot() +
aes(x = cut, y = n) +  # 'n' --> COUNT
geom_col() +
# n correspond à la fonction "count" par defaut
geom_text(aes(label=n, y = n /2), color = "white")
diamonds %>%
count(cut) %>%
ggplot() +
aes(x = cut, y = n) +
geom_col() +
# ***IL ne faut pas faire ceci***
geom_text(aes(label=n, y = n /2, color = "white"))
diamonds %>%
count(cut) %>%
ggplot() +
aes(x = cut, y = n) +  # 'n' --> COUNT
geom_col() +
# n correspond à la fonction "count" par defaut
geom_text(aes(label=n, y = n /2), color = "white")
ggplot(diamonds) +
aes(x=cut,  fill=clarity) +
geom_bar()
diamonds %>%
count(cut)
diamonds %>%
count(cut, color)
diamonds %>%
count(cut, color) %>%  # count (n) group by (cut + color)
ggplot() +
aes(x=cut, y= n,   fill=color) +
geom_col()
diamonds %>%
count(cut, color) %>%
ggplot() +
aes(x=cut, y= n, fill=color) +
geom_col(position = "dodge")
diamonds %>%
count(cut, color) %>%
ggplot() +
aes(x=cut, y= n,   fill=color) +
geom_col(position = "fill")
diamonds %>%
count(cut) %>%
ggplot() +
aes(x = 0, y =n, fill = cut) +
geom_col()
diamonds %>%
count(cut) %>%
ggplot() +
aes(x = 0, y =n, fill = cut) +
geom_col() +
theme_void()
diamonds %>%
count(cut) %>%
ggplot() +
aes(x = 0, y =n, fill = cut) +
geom_col() +
coord_polar(theta="y")
theme_void()
# load the whole "tidyverse" package
library(tidyverse)
# View the entire dataset 'iris'
iris
# View the entire dataset 'iris'
iris
# view as subset of the dataset 'iris'
as_tibble(iris)
help(select)
tbl_iris <- as_tibble(iris)
tbl_iris
# Manipulate data from dataset : filter / select / arrange / group_by / summarize
filter(tbl_iris, Petal.Length > 3)
select(tbl_iris, Sepal.Length, Species)
select(tbl_iris, Sepal.Length, Species, everything())
select_if(tbl_iris, is.numeric)  # permet de seelctionner quel colonne nous interesse d'une manière conditionnelle
select(tbl_iris, -Species)
tbl_iris[1:10, c(2,5)] # to avoid. select column_2_and_5 from rows.1_to_10
select(tbl_iris, 3:5)  # to avoid. select column_3_to_5  in all dataset
mutate(tbl_iris, Petal.Size = Petal.Length * Petal.Width)  # Rajoute une colonne
select(tbl_iris, Sepal.Length, Species)
mutate(tbl_iris, Species = NULL)                   # Supprimer une colonne
mutate(tbl_iris, Species = str_to_title(Species))  # Modifie une colonne ds le dataset récupérer; Le ds initial reste intacte
# Titre - Document Outline ####
arrange(tbl_iris, Sepal.Length)  # order by ASC
# Group by | Summarize : mean() / median() / n()
tbl_iris %>%
group_by(Species) %>%
summarise(Mean = mean(Sepal.Length),
Median = median(Sepal.Length),
N = n())
tbl_iris %>%
group_by(Species) %>%
summarise(Mean = mean(Sepal.Length),
Median = median(Sepal.Length),
N = n_distinct(Sepal.Length))
WorldPhones %>%
as_tibble(rownames = "Year") %>%
mutate(Year = as.numeric(Year))
WorldPhones %>%
as_tibble(rownames = "Year") %>%
mutate(Year = as.numeric(Year))%>%
pivot_longer(-Year,
names_to = "Region", # outcome 'longer format' column name.
# Imagine that there are n-columns to be transformed from 'wider format' to 1-column 'longer format'
values_to = "Number" # outcome 'values' column name
)
matplot(rownames(WorldPhones), WorldPhones, type = "b", log = "y",
xlab = "Year", ylab = "Number of telephones (1000's)")
# View the entire dataset 'iris'
iris
# view as subset of the dataset 'iris'
as_tibble(iris)
tbl_iris <- as_tibble(iris)
tbl_iris
select(tbl_iris, Sepal.Length, Species)
select(iris, Sepal.Length, Species)
