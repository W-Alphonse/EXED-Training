as_tibble(rownames = "Year") %>%
mutate(Year = as.numeric(Year))%>%
pivot_longer(-Year,
names_to = "Region", # outcome 'longer format' column name.
# Imagine that there are n-columns to be transformed from 'wider format' to 1-column 'longer format'
values_to = "Number" # outcome 'values' column name
) %>%
pivot_wider(names_from = Region, values_from = Number)
matplot(rownames(WorldPhones), WorldPhones, type = "b", log = "y",
xlab = "Year", ylab = "Number of telephones (1000's)")
legend(1951.5, 80000, colnames(WorldPhones), col = 1:6, lty = 1:5,
pch = rep(21, 7))
title(main = "World phones data: log scale for response")
library(tidyverse)
ggplot(iris)
as_tibble(iris)
ggplot(iris) +
aes(x=Sepal.Length, y=Sepal.Width)
ggplot(iris) +
aes(x=Sepal.Length, y=Sepal.Width) +
geom_point()
ggplot(iris) +
aes(x=Sepal.Length, y=Sepal.Width, color=Species) +
geom_point()
ggplot(iris) +
aes(x=Sepal.Length, y=Sepal.Width) +
geom_point()
ggplot(iris) +
aes(x=Sepal.Length, y=Sepal.Width, color=Species) +
geom_point()
ggplot(iri•s) +
aes(x=Sepal.Length, y=Sepal.Width, color=Species) +
geom_point()
ggplot(iris) +
aes(x=Sepal.Length, y=Sepal.Width, color=Species) +
geom_point()
# Geometrie 'boxplot'
ggplot(iris) +
aes(x=Species, y = Sepal.Length) +
geom_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, color=Species,) +
geom_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, color=Species,) +
geom_boxplot()
# 'fill' related to the color of the filled object
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot(show.legend = FALSE)  # ceci enlève la legende par type geometrie
ueval()
uneval()
uneval(aes)
default_aes
? aes
ggplot2:::.all_aesthetics
aes
? aes
ggplot2:::.all_aesthetics
# 'fill' related to the color of the filled object
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot(show.legend = FALSE)  # ceci enlève la legende par type geometrie
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot() +
scale_fill_manual(values = c(setosa="blue", versicolor="red", virginica = "green"))
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot() +
scale_fill_manual(values = c(setosa="blue", versicolor="red", virginica = "green"))
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot() +
scale_fill_manual(values = c(setosa="blue", versicolor="red", virginica = "green")) +
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot() +
scale_fill_manual(values = c(setosa="#a45f1c",
versicolor="red",
virginica = "green")) +
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot() +
scale_fill_viridis_d() +
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot() +
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species,) +
geom_boxplot() +
scale_fill_manual(values = c(setosa="blue", versicolor="red", virginica = "green"))
ggplot(iris) +
aes(x=Species, y = Sepal.Length, color=Species,) +
geom_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, color=Species) +
geom_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species) +
geom_boxplot(show.legend = FALSE)
ggplot(iris) +
aes(x=Species, y = Sepal.Length) +
geom_boxplot() +
scale_fill_manual(values = c(setosa="blue", versicolor="red", virginica = "green")) +
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species) +
geom_boxplot() +
scale_fill_viridis_d() +
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species) +
geom_boxplot(color = "tomato") +
scale_fill_viridis_d() +
theme(legend.position = "none")
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species) +
geom_boxplot() +
scale_fill_viridis_d() +
theme(legend.position = "none")
# The viridis scales provide colour maps that are perceptually uniform in both colour and black-and-white.
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species) +
geom_boxplot() +
scale_fill_viridis_c() +
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
# The viridis scales provide colour maps that are perceptually uniform in both colour and black-and-white.
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species) +
geom_boxplot() +
scale_fill_viridis_d() +
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
# Graph d'une seule variable; c'est un histogramme. NB: histogramme(donnée continue) <> bar graph(donnée catégorisée)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram()
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 30)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_density(fill = "blue")
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  # param de transparence
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 30)
source('D:/dev/EXED/Training/W1-2/DSSP14/plot.R', encoding = 'UTF-8')
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 300)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 3)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 30)
# Graph d'une seule variable; c'est un histogramme. NB: histogramme(donnée continue) <> bar graph(donnée catégorisée)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species) +
geom_boxplot() +
scale_fill_manual(values = c(setosa="blue", versicolor="red", virginica = "green")) +
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species) +
geom_boxplot() +
scale_fill_manual(values = c(setosa="blue", versicolor="red", virginica = "green"))
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species) +
geom_boxplot() +
scale_fill_manual(values = c(setosa="blue", versicolor="red", virginica = "green", bb="black")) +
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species) +
geom_boxplot(color = "tomato") +
scale_fill_viridis_d() +
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill=Species) +
geom_boxplot(color = "tomato") +
scale_fill_viridis_d() +
theme(legend.position = "none") # ceci enlève tout les legendes du graphe
# Graph d'une seule variable; c'est un histogramme. NB: histogramme(donnée continue) <> bar graph(donnée catégorisée)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram()
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 30)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_density(fill = "blue")
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  # param de transparence
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 1)  # param de transparence
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(. ~Species)  # a-droite est "." car Il n'ya rien, on met unquement la avleru à gauche
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 30)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 30)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 10)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 100)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 30)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_density(fill = "blue")
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density()
ggplot(iris) +
aes(x=Sepal.Length, fill = "blue") +
geom_density()
ggplot(iris) +
aes(x=Sepal.Length) +
geom_density()
ggplot(iris) +
aes(x=Sepal.Length, color = "blue") +
geom_density()
ggplot(iris) +
aes(x=Sepal.Length, color = Species) +
geom_density()
ggplot(iris) +
aes(x=Sepal.Length, fill = "blue") +
geom_density()
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density()
ggplot(iris) +
aes(x=Sepal.Length) +
geom_density(fill = "blue")
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density()
ggplot(iris) +
aes(x=Sepal.Length) +
geom_density(fill = "blue")
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  # param d'opacité
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 1)  # param d'opacité
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.2)  # param d'opacité
ggplot(iris) +
aes(x=Sepal.Length, fill = "blugdfgfdgde") +
geom_density()
iris
tibble_as(iris)
as_tibble(iris)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_density(fill = "blue")
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  # param d'opacité. alpha==1 => Opaque. alpha==0 => Transparent
ggplot(iris) +
aes(x=Sepal.Length, fill = Species, color = Species) +
geom_density(alpha = 0.4)  # param d'opacité
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(. ~Species)  # a-droite est "." car Il n'ya rien, on met unquement la avleru à gauche
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(. ~Species)
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(Species ~.
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(Species ~.)
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(Species ~.)
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(. ~Species)
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(Species ~.)  +
theme(legend.position = "none")
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(. ~Species)
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(. ~Species)
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(. ~ Species)
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)
ggplot(iris) +
aes(x=Sepal.Length, fill = Species)
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density()
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram()
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 3)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 300)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 5)
ggplot(iris) +
aes(x=Sepal.Length) +
geom_histogram(bins = 30)
ggplot(iris) +
# NB: aes() is a quoting function.
# This means that its inputs are quoted to be evaluated in the context of the data. This makes it easy to work with variables from the data frame because you can name those directly.
aes(x=Sepal.Length, color = Species) +
geom_density()
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(Species ~ .)  +
theme(legend.position = "none")
# facet http://www.cookbook-r.com/Graphs/Facets_(ggplot2)/
ggplot(iris) +
aes(x=Sepal.Length, fill = Species) +
geom_density(alpha = 0.4)  +
facet_grid(. ~ Species)  # a-droite est "." car Il n'ya rien, on met uniquement la valeur à gauche
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_boxplot()  +
theme_minimal()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_boxplot()  +
theme_minimal()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_boxplot()  +
geom_violin() +
theme_minimal()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot()  +
theme_minimal()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot()  +
theme_minimal()  +
theme(legend.position = "none")
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
theme_minimal()  +
theme(legend.position = "none")
# alpha pour enlever l opcité sur l'element gem_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
# theme_minimal()  +
theme(legend.position = "none")
# alpha pour enlever l opcité sur l'element gem_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
theme_minimal()  +
theme(legend.position = "none")
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
geom_point() +
#theme_minimal()  +
theme_grey()  +
theme(legend.position = "none")
# alpha pour enlever l opcité sur l'element gem_boxplot()
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#  theme_minimal()  +
theme(legend.position = "none")
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
geom_point() +
#theme_minimal()  +
theme_grey()  +
theme(legend.position = "none")
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
geom_point() +
theme_minimal()  +
#theme_grey()  +
theme(legend.position = "none")
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
# geom_violin() +
# geom_boxplot(alpha = 0)  +
geom_point() +
theme_minimal()  +
theme(legend.position = "none")
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
geom_point() +
theme_minimal()  +
theme(legend.position = "none")
install.packages("ggbeeswarm")
install.packages("ggbeeswarm")
install.packages("ggbeeswarm")
install.packages("ggforce")
# ggbeeswarm::geom_beeswarm() le "::" evite de charger le package ggbeeswarm
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#  ggbeeswarm::geom_beeswarm() +
# ggbeeswarm::geom_quasirandom() +
ggforce::geom_sina() +
theme_minimal()  +
theme(legend.position = "none")
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
geom_point() +
theme_minimal()  +
theme(legend.position = "none")
install.packages("ggplot")
# ggbeeswarm::geom_beeswarm() le "::" evite de charger le package ggbeeswarm
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#  ggbeeswarm::geom_beeswarm() +
# ggbeeswarm::geom_quasirandom() +
ggforce::geom_sina() +
theme_minimal()  +
theme(legend.position = "none")
library(tidyverse)
# ggbeeswarm::geom_beeswarm() le "::" evite de charger le package ggbeeswarm
ggplot(iris) +
aes(x=Species, y = Sepal.Length, fill = Species) +
geom_violin() +
geom_boxplot(alpha = 0)  +
#  ggbeeswarm::geom_beeswarm() +
# ggbeeswarm::geom_quasirandom() +
ggforce::geom_sina() +
theme_minimal()  +
theme(legend.position = "none")
